#!/usr/bin/env ruby

if ARGV.empty?
  puts <<-EOB

    Generate a timesheet (CSV) and invoice (PDF).

    worksheet [-f] [-p] -n [-x|-i [day[am|pm]],[...]]
      -f    - overwrite existing timesheet/invoice
      -n    - generate timesheet/invoice for n months ago (-0 to -12)
      -x    - specify days to exclude (sat/sun excluded anyway)
      -i    - specify days to include
      am|pm - just the morning or afternoon was taken off (half a day)

  EOB
  exit
end

require 'active_support'
require 'active_support/time'
require 'active_support/core_ext/numeric/conversions'
require 'wicked_pdf'
require 'slim'
require_relative 'base'

def file_date(prefix, date, suffix)
  "#{prefix}_#{date.to_s(:file_no_day)}.#{suffix}"
end

def timesheet_filename(date)
  file_date("timesheet", date, "csv")
end

def invoice_filename(date)
  file_date("invoice", date, "pdf")
end

def write_timesheet(date)
  csv = "#{@config['service']}\n"
  csv += "by Phil Thompson (Electric Visions Ltd)\n"
  csv += "for #{date.to_s(:month_name_year)}\n"
  csv += "#{@config['client_reference_label']} #{@config['client_reference']}\n"
  csv += "\n"
  csv += "Day,Hours\n"
  total = 0
  (date..date.end_of_month.to_date).each do |d|
    day = working_days(d)
    total += day if day.is_a?(Float)
    csv += "#{d.day},#{day * @hours_per_day}\n"
  end
  csv += "\n"
  csv += "Total (hours),#{total * @hours_per_day}\n"
  csv += "Total (days),#{total}\n"
  csv += "\n"
  csv += "\n"
  csv += "Contractor Signature:,,______________________________\n"
  csv += "\n"
  csv += "Contractor Printed Name:,,______________________________\n"
  csv += "\n"
  csv += "Date:,,______________________________\n"
  csv += "\n"
  csv += "\n"
  csv += "Client Signature:,,______________________________\n"
  csv += "\n"
  csv += "Client Printed Name:,,______________________________\n"
  csv += "\n"
  csv += "Date:,,______________________________\n"

  File.open(timesheet_filename(date), 'w') {|f| f.write csv }
  total
end

class Invoice
  def initialize(date, total_days, hours_per_day)
    @name = 'invoice'
    @date = date
    @hours_per_day = hours_per_day
    @total_days = total_days
  end

  def invoice_num
    previous_invoice_count = Dir['invoice_*'].size
    if previous_invoice_count == 0
      puts "WARNING: NO PREVIOUS INVOICES DETECTED"
      puts "If this is the first invoice you can ignore this warning"
      puts "Otherwise make sure previous invoices are in the correct format:"
      puts "    #{timesheet_filename(@date)}"
      puts "    #{invoice_filename(@date)}"
    end
    '%03d' % (previous_invoice_count + 1)
  end

  def month_year
    @date.to_s(:month_name_year)
  end

  def todays_date
    Date.today.to_s(:long)
  end

  def total_hours
    @total_days * @hours_per_day
  end

  def rate(rate = nil)
    @rate ||= rate
  end

  def days
    @total_days
  end

  def subtotal
    rate * days
  end

  def vat
    subtotal * 0.2
  end

  def total
    subtotal + vat
  end

  def name(ext)
    "#{@name}.#{ext}"
  end

  def filename
    invoice_filename(@date)
  end
end

def working_days(date)
  if @days_are_included
    @days[date.day] || ''
  else
    if date.saturday? || date.sunday?
    ''
    else
      1.0 - @days[date.day].to_f
    end
  end
end

# Arguments (other args must be removed before days)
@days_are_included = ARGV.delete('-i')
@days_are_excluded = ARGV.delete('-x')
if @days_are_included && @days_are_excluded
  puts "Days can only be included or excluded. Not both. Specify -i or -x."
  exit 1
end

require 'yaml'
@config = YAML.load(File.open 'config.yml')
@hours_per_day = @config['hours_per_day']

@overwrite = ARGV.delete('-f')
month = (0..12).detect {|n| ARGV.delete("-#{n}") }
if ARGV.size > 0
  @days = ARGV.first.split(',').map do |day|
    [day.to_i, day =~ /am|pm/ ? 0.5 : 1.0]
  end.to_h
else
  @days = []
end

date = month.month.ago.beginning_of_month.to_date
if File.exist?(timesheet_filename(date)) || File.exist?(invoice_filename(date))
  if @overwrite
    FileUtils.rm_f(timesheet_filename(date))
    FileUtils.rm_f(invoice_filename(date))
  else
    puts "Existing timesheet and/or invoice detected for #{date}"
    puts "Use -f to overwrite"
    exit 1
  end
end
total_days = write_timesheet(date)
write_pdf(Invoice.new(date, total_days, @hours_per_day))
