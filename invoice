#!/usr/bin/env ruby

if ARGV.empty?
  puts <<-EOB

    Generate a timesheet (CSV) and invoice (PDF).

    invoice path [-f] [-p] -n [-x|-i [day[am|pm]],[...]]
      path  - path to the client directory
      -f    - overwrite existing timesheet/invoice
      -n    - generate timesheet/invoice for n months ago (-0 to -12)
      -x    - specify days to exclude (sat/sun excluded anyway)
      -i    - specify days to include
      am|pm - just the morning or afternoon was taken off (half a day)

  EOB
  exit
end
 
require 'bundler/setup'
require 'active_support'
require 'active_support/time'
require 'active_support/core_ext/numeric/conversions'
require 'prawn'

# Arguments (other args must be removed before days)
days_are_included = ARGV.delete('-i')
days_are_excluded = ARGV.delete('-x')
if days_are_included && days_are_excluded
  puts "Days can only be included or excluded. Not both. Specify -i or -x."
  exit 1
end

I18n.load_path << "#{File.dirname(__FILE__)}/en.yml"
I18n.t('date.formats').each do |key, value|
  Date::DATE_FORMATS[key] = value
end

def currency(amount, options = {})
  "Â£#{'%.2f' % amount}"
end

def vat()
  subtotal * 0.2
end

def total
  subtotal + vat
end

def invoice_num(date)
  previous_invoice_count = Dir['invoice_*'].size
  if previous_invoice_count == 0
    puts "WARNING: NO PREVIOUS INVOICES DETECTED"
    puts "If this is the first invoice you can ignore this warning"
    puts "Otherwise make sure previous invoices are in the correct format:"
    puts "    #{invoice_filename(date)}"
  end
  '%03d' % (previous_invoice_count + 1)
end

def file_date(prefix, date, suffix)
  "#{prefix}_#{date.to_fs(:file_no_day)}.#{suffix}"
end

def invoice_filename(date)
  file_date("invoice", date, "pdf")
end

def working_days(date, days, days_are_included)
  if days_are_included
    days[date.day] || ''
  else
    if date.saturday? || date.sunday?
    ''
    else
      1.0 - days[date.day].to_f
    end
  end
end


require 'yaml'

c = YAML.load(File.open File.join(__dir__, 'config.yml'))
c = c.merge YAML.load(File.open 'config.yml')

overwrite = ARGV.delete('-f')
month = (0..12).detect {|n| ARGV.delete("-#{n}") }
if ARGV.size > 0
  days = ARGV.first.split(',').map do |day|
    [day.to_i, day =~ /am|pm/ ? 0.5 : 1.0]
  end.to_h
else
  days = []
end

date = month.month.ago.beginning_of_month.to_date

total_days = 0
(date..date.end_of_month.to_date).each do |d|
  day = working_days(d, days, days_are_included)
  total_days += day if day.is_a?(Float)
end

def padded_text text, *args
  pad_bottom(2) do
    text text, *args
  end
end

grey = '999999'

invoice_path = invoice_filename(date)

if File.exist?(invoice_path)
  if overwrite
    FileUtils.rm_f(invoice_path)
  else
    puts "Existing invoice detected for #{date}"
    puts "Use -f to overwrite"
    exit 1
  end
end

Prawn::Document.generate(invoice_path) do
  font_families.update(
    'SourceSans3 Light' => {
      normal: "/home/phil/.local/share/fonts/SourceSans3-Light.otf",
      bold: "/home/phil/.local/share/fonts/SourceSans3-Regular.otf"
    }
  )

  font 'SourceSans3 Light'
  font_size 14

  # ADDRESS
  float do
    font_size(25) { text "#{c['company']}" }
    move_down 10
    padded_text "#{c['address1']}, #{c['address2']}, #{c['address3']}"
    padded_text c['email']
    padded_text "Company no. #{c['company_no']}"
    padded_text "VAT no. #{c['vat_no']}"
  end

  font_size(25) do
    text "INVOICE", color: grey, align: :right
  end
  move_down 30
  pad_bottom(10) do
    text "INVOICE NO: <b>#{c['invoice_prefix']}#{invoice_num(date)}</b>", align: :right, inline_format: true
  end
  text "DATE: <b>#{Date.today.to_fs(:long)}</b>", align: :right, inline_format: true

  move_down 20

  # TO
  move_down 20
  text 'TO:', style: :bold, size: 18
  padded_text c['client_name']
  padded_text c['client_address']
  move_down 20
  
  # BILL
  table_top = cursor - 10
  bounding_box([0, table_top], width: 200) do
    text 'DESCRIPTION', style: :bold
    move_down 10
    text "#{c['service']} for #{date.to_fs(:month_name_year)}"
  end

  bounding_box([250, table_top], width: 100) do
    text 'DAYS', style: :bold
    move_down 10
    text "#{total_days}"
  end

  bounding_box([350, table_top], width: 100) do
    text 'RATE', style: :bold
    move_down 10
    text currency(c['rate'])
  end

  bounding_box([450, table_top], width: 90) do
    text 'AMOUNT', style: :bold, align: :right
    move_down 10
    text currency(c['rate'] * total_days), align: :right
  end

  move_up 30
  transparent(0.5) { stroke_horizontal_rule }
  move_down 200
  transparent(0.5) { stroke_horizontal_rule }
  move_down 10

  total_cursor = cursor
  bounding_box([350, total_cursor], width: 95) do
    text 'VAT (20%)', style: :bold, align: :right
    text 'TOTAL', style: :bold, align: :right
  end

  subtotal = c['rate'] * total_days
  vat = subtotal * 0.2
  bounding_box([450, total_cursor], width: 90) do
    text (currency (vat)), align: :right
    text (currency (subtotal + vat)), align: :right
  end

  text 'Payment terms', style: :bold, size: 18
  padded_text "Payment due in #{c['payment_terms']} days"
  move_down 5
  padded_text "Name: <b>#{c['account_name']}</b>", inline_format: true
  padded_text "Sort code: <b>#{c['account_sortcode']}</b>", inline_format: true
  padded_text "Account no: <b>#{c['account_number']}</b>", inline_format: true
end
